plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    //modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    // Cloth Config for NeoForge runtime
    modImplementation "me.shedaniel.cloth:cloth-config-neoforge:${rootProject.cloth_config_version}"

    common(project(path: ':modules:common', configuration: 'namedElements')) { transitive = false }
    shadowBundle project(path: ':modules:common', configuration: 'transformProductionNeoForge')

    // Compile-time access to RA API
    compileOnly "net.oxcodsnet.roadarchitect:roadarchitect-common:${rootProject.roadarchitect_version}"
}

processResources {
    def props = [
            version              : project.version,
            mod_id               : rootProject.findProperty('mod_id'),
            mod_name             : rootProject.findProperty('mod_name'),
            mod_description      : rootProject.findProperty('mod_description'),
            mod_authors          : rootProject.findProperty('mod_authors'),
            mod_homepage         : rootProject.findProperty('mod_homepage'),
            mod_sources          : rootProject.findProperty('mod_sources'),
            mod_license          : rootProject.findProperty('mod_license'),
            minecraft_version    : rootProject.findProperty('minecraft_version'),
            neoforge_version     : rootProject.findProperty('neoforge_version'),
            cloth_config_version : rootProject.findProperty('cloth_config_version'),
    ]
    inputs.properties(props)

    filesMatching('META-INF/neoforge.mods.toml') {
        expand(props)
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    archiveFileName.set("roadarchitect_encounters-${project.version}-neoforge+${rootProject.minecraft_version}.jar")
}


dependencies {
    // Dev-run: include RoadArchitect (NeoForge) at runtime.
    // Use dev-mapped artifact (Yarn) so it matches the project's mapping style
    // and can be remapped by Loom for the NeoForge userdev.
    modLocalRuntime "net.oxcodsnet.roadarchitect:roadarchitect-neoforge:${rootProject.roadarchitect_version}:dev-shadow"
}

// =========== Modrith =========
apply plugin: "com.modrinth.minotaur"
def modrinth_token = rootProject.ext.resolveModrinthToken()
if (!modrinth_token) throw new GradleException("Set MODRINTH_TOKEN env or in .env")

modrinth {
    token = modrinth_token
    projectId = "XVknWoiY"
    versionNumber = "${project.version}-neoforge"
    versionName   = "RoadArchitect: Encounters v${project.version}+${rootProject.minecraft_version} [NeoForge]"
    versionType   = "release"                 // или "beta"/"alpha"
    gameVersions  = [ rootProject.minecraft_version ]
    loaders       = [ "neoforge" ]
    uploadFile    = remapJar                   // из Loom
    changelog     = rootProject.file("CHANGELOG.md").exists() ? rootProject.file("CHANGELOG.md").text : ""
    dependencies { required.project "cloth-config" }
}

// ====================== CurseForge ====================
apply plugin: "net.darkhax.curseforgegradle"

def curse_token = rootProject.ext.resolveCurseforgeToken()
if (!curse_token) throw new GradleException("Set CURSEFORGE_TOKEN env or in .env/gradle.properties")


def curse_project_id =
        (findProperty("curseforge_project_fabric")
                ?: System.getenv("CURSEFORGE_PROJECT_FABRIC")
                ?: findProperty("curseforge_project")
                ?: System.getenv("CURSEFORGE_PROJECT_ID")
                ?: "1337294")

tasks.register("curseforge", net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = curse_token

    disableVersionDetection()

    dependsOn remapJar
    def mainFile = upload(curse_project_id as String, remapJar)

    mainFile.displayName = "RoadArchitect: Encounters v${project.version}+${rootProject.minecraft_version} [NeoForge]"
    mainFile.releaseType = "release"
    mainFile.addModLoader("NeoForge")
    mainFile.addGameVersion("${rootProject.minecraft_version}")
    mainFile.addJavaVersion("Java 21")
    mainFile.addEnvironment("Client", "Server")
    mainFile.changelog = rootProject.file("CHANGELOG.md"); mainFile.changelogType = "markdown"
    mainFile.addRequirement("cloth-config")
    mainFile.addOptional("catalogue")
}
